/* Generated By:JJTree&JavaCC: Do not edit this line. XParserConstants.java */
package fr.upsud.lri.xqparser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface XParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IntegerLiteral = 132;
  /** RegularExpression Id. */
  int DecimalLiteral = 133;
  /** RegularExpression Id. */
  int DoubleLiteral = 134;
  /** RegularExpression Id. */
  int StringLiteral = 135;
  /** RegularExpression Id. */
  int DUMMYLABEL = 136;
  /** RegularExpression Id. */
  int skip_ = 137;
  /** RegularExpression Id. */
  int Minus = 138;
  /** RegularExpression Id. */
  int Plus = 139;
  /** RegularExpression Id. */
  int External = 140;
  /** RegularExpression Id. */
  int Ascending = 141;
  /** RegularExpression Id. */
  int Descending = 142;
  /** RegularExpression Id. */
  int Greatest = 143;
  /** RegularExpression Id. */
  int Least = 144;
  /** RegularExpression Id. */
  int LocalPart = 145;
  /** RegularExpression Id. */
  int Nmstart = 146;
  /** RegularExpression Id. */
  int Nmchar = 147;
  /** RegularExpression Id. */
  int PredefinedEntityRef = 148;
  /** RegularExpression Id. */
  int EscapeQuot = 149;
  /** RegularExpression Id. */
  int EscapeApos = 150;
  /** RegularExpression Id. */
  int HexDigits = 151;
  /** RegularExpression Id. */
  int Lbrace = 152;
  /** RegularExpression Id. */
  int Rbrace = 153;
  /** RegularExpression Id. */
  int RbraceErrorInContent = 154;
  /** RegularExpression Id. */
  int LCurlyBraceEscape = 155;
  /** RegularExpression Id. */
  int RCurlyBraceEscape = 156;
  /** RegularExpression Id. */
  int Amp = 157;
  /** RegularExpression Id. */
  int LessThanOpOrTagO = 158;
  /** RegularExpression Id. */
  int StartTagOpen = 159;
  /** RegularExpression Id. */
  int AttrLTCharError = 160;
  /** RegularExpression Id. */
  int StartTagClose = 161;
  /** RegularExpression Id. */
  int OpenQuot = 162;
  /** RegularExpression Id. */
  int CloseQuot = 163;
  /** RegularExpression Id. */
  int OpenApos = 164;
  /** RegularExpression Id. */
  int CloseApos = 165;
  /** RegularExpression Id. */
  int ExtensionContentChar = 166;
  /** RegularExpression Id. */
  int ElementContentChar = 167;
  /** RegularExpression Id. */
  int QuotAttrContentChar = 168;
  /** RegularExpression Id. */
  int AposAttrContentChar = 169;
  /** RegularExpression Id. */
  int CommentContentChar = 170;
  /** RegularExpression Id. */
  int EmptyTagClose = 171;
  /** RegularExpression Id. */
  int EndTagOpen = 172;
  /** RegularExpression Id. */
  int EndTagClose = 173;
  /** RegularExpression Id. */
  int ValueIndicator = 174;
  /** RegularExpression Id. */
  int PragmaOpen = 175;
  /** RegularExpression Id. */
  int PragmaClose = 176;
  /** RegularExpression Id. */
  int XMLCommentDoubleDashError = 177;
  /** RegularExpression Id. */
  int CommentContentCharDash = 178;
  /** RegularExpression Id. */
  int ProcessingInstructionStart = 179;
  /** RegularExpression Id. */
  int ProcessingInstructionStartForElementContent = 180;
  /** RegularExpression Id. */
  int ProcessingInstructionEnd = 181;
  /** RegularExpression Id. */
  int PIContentChar = 182;
  /** RegularExpression Id. */
  int CDataSectionChar = 183;
  /** RegularExpression Id. */
  int CdataSectionStart = 184;
  /** RegularExpression Id. */
  int CdataSectionStartForElementContent = 185;
  /** RegularExpression Id. */
  int CdataSectionEnd = 186;
  /** RegularExpression Id. */
  int XmlCommentStart = 187;
  /** RegularExpression Id. */
  int XmlCommentStartForElementContent = 188;
  /** RegularExpression Id. */
  int XmlCommentEnd = 189;
  /** RegularExpression Id. */
  int Comment = 190;
  /** RegularExpression Id. */
  int CommentStart = 191;
  /** RegularExpression Id. */
  int CommentContent = 192;
  /** RegularExpression Id. */
  int CommentEnd = 193;
  /** RegularExpression Id. */
  int Slash = 194;
  /** RegularExpression Id. */
  int SlashSlash = 195;
  /** RegularExpression Id. */
  int PITargetError = 196;
  /** RegularExpression Id. */
  int PITarget = 197;
  /** RegularExpression Id. */
  int CharRef = 198;
  /** RegularExpression Id. */
  int QNameToken = 199;
  /** RegularExpression Id. */
  int QNameForPragma = 200;
  /** RegularExpression Id. */
  int TagQName = 201;
  /** RegularExpression Id. */
  int EndTagQName = 202;
  /** RegularExpression Id. */
  int NCNameTok = 203;
  /** RegularExpression Id. */
  int NCNameColonStar = 204;
  /** RegularExpression Id. */
  int StarColonNCName = 205;
  /** RegularExpression Id. */
  int S = 206;
  /** RegularExpression Id. */
  int SForPragma = 207;
  /** RegularExpression Id. */
  int SForPI = 208;
  /** RegularExpression Id. */
  int Char = 209;
  /** RegularExpression Id. */
  int Digits = 210;
  /** RegularExpression Id. */
  int CommentContents = 211;
  /** RegularExpression Id. */
  int WhitespaceChar = 212;
  /** RegularExpression Id. */
  int Letter = 213;
  /** RegularExpression Id. */
  int BaseChar = 214;
  /** RegularExpression Id. */
  int Ideographic = 215;
  /** RegularExpression Id. */
  int CombiningChar = 216;
  /** RegularExpression Id. */
  int Digit = 217;
  /** RegularExpression Id. */
  int Extender = 218;
  /** RegularExpression Id. */
  int NotNumber = 219;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int FTPOSFILTER = 1;
  /** Lexical state. */
  int FTMATCHOPTION = 2;
  /** Lexical state. */
  int PROLOG_SPECIAL = 3;
  /** Lexical state. */
  int PROLOG_NCNAME = 4;
  /** Lexical state. */
  int DECLAREORDERING = 5;
  /** Lexical state. */
  int PROLOG = 6;
  /** Lexical state. */
  int OPERAND = 7;
  /** Lexical state. */
  int OPERATOR = 8;
  /** Lexical state. */
  int KINDTEST = 9;
  /** Lexical state. */
  int NAMESPACEDECL = 10;
  /** Lexical state. */
  int SINGLETYPE = 11;
  /** Lexical state. */
  int ITEMTYPE = 12;
  /** Lexical state. */
  int NAMESPACEKEYWORD = 13;
  /** Lexical state. */
  int VARNAME = 14;
  /** Lexical state. */
  int OCCURRENCEINDICATOR = 15;
  /** Lexical state. */
  int CLOSEKINDTEST = 16;
  /** Lexical state. */
  int XQUERYVERSION = 17;
  /** Lexical state. */
  int PRAGMA = 18;
  /** Lexical state. */
  int OPTION = 19;
  /** Lexical state. */
  int URITOOPERATOR = 20;
  /** Lexical state. */
  int ELEMENT_CONTENT = 21;
  /** Lexical state. */
  int QUOT_ATTRIBUTE_CONTENT = 22;
  /** Lexical state. */
  int APOS_ATTRIBUTE_CONTENT = 23;
  /** Lexical state. */
  int START_TAG = 24;
  /** Lexical state. */
  int PRAGMACONTENTS = 25;
  /** Lexical state. */
  int XML_COMMENT = 26;
  /** Lexical state. */
  int END_TAG = 27;
  /** Lexical state. */
  int PRAGMACONTENTSSPACEDIVIDER = 28;
  /** Lexical state. */
  int PROCESSING_INSTRUCTION = 29;
  /** Lexical state. */
  int PROCESSING_INSTRUCTION_CONTENT = 30;
  /** Lexical state. */
  int CDATA_SECTION = 31;
  /** Lexical state. */
  int EXPR_COMMENT = 32;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"%%%\"",
    "\"xquery\"",
    "\"version\"",
    "\"encoding\"",
    "\"module\"",
    "\"namespace\"",
    "\"=\"",
    "\";\"",
    "\"declare\"",
    "\"boundary-space\"",
    "\"preserve\"",
    "\"strip\"",
    "\"default\"",
    "\"element\"",
    "\"function\"",
    "\"option\"",
    "\"ordering\"",
    "\"ordered\"",
    "\"unordered\"",
    "\"order\"",
    "\"empty\"",
    "\"copy-namespaces\"",
    "\",\"",
    "\"no-preserve\"",
    "\"inherit\"",
    "\"no-inherit\"",
    "\"collation\"",
    "\"base-uri\"",
    "\"import\"",
    "\"schema\"",
    "\"at\"",
    "\"variable\"",
    "\"$\"",
    "\":=\"",
    "\"construction\"",
    "\"updating\"",
    "\"(\"",
    "\")\"",
    "\"as\"",
    "\"return\"",
    "\"for\"",
    "\"in\"",
    "\"let\"",
    "\"where\"",
    "\"by\"",
    "\"stable\"",
    "\"some\"",
    "\"every\"",
    "\"satisfies\"",
    "\"typeswitch\"",
    "\"case\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"or\"",
    "\"and\"",
    "\"to\"",
    "\"*\"",
    "\"div\"",
    "\"idiv\"",
    "\"mod\"",
    "\"union\"",
    "\"|\"",
    "\"intersect\"",
    "\"except\"",
    "\"instance\"",
    "\"of\"",
    "\"treat\"",
    "\"castable\"",
    "\"cast\"",
    "\"!=\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"eq\"",
    "\"ne\"",
    "\"lt\"",
    "\"le\"",
    "\"gt\"",
    "\"ge\"",
    "\"is\"",
    "\"<<\"",
    "\">>\"",
    "\"validate\"",
    "\"lax\"",
    "\"strict\"",
    "\"child\"",
    "\"::\"",
    "\"descendant\"",
    "\"attribute\"",
    "\"self\"",
    "\"descendant-or-self\"",
    "\"following-sibling\"",
    "\"following\"",
    "\"@\"",
    "\"parent\"",
    "\"ancestor\"",
    "\"preceding-sibling\"",
    "\"preceding\"",
    "\"ancestor-or-self\"",
    "\"..\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"document\"",
    "\"text\"",
    "\"comment\"",
    "\"processing-instruction\"",
    "\"?\"",
    "\"empty-sequence\"",
    "\"item\"",
    "\"node\"",
    "\"document-node\"",
    "\"schema-attribute\"",
    "\"schema-element\"",
    "\"revalidation\"",
    "\"skip\"",
    "\"first\"",
    "\"last\"",
    "\"into\"",
    "\"after\"",
    "\"before\"",
    "\"insert\"",
    "\"nodes\"",
    "\"delete\"",
    "\"replace\"",
    "\"value\"",
    "\"with\"",
    "\"rename\"",
    "\"copy\"",
    "\"modify\"",
    "<IntegerLiteral>",
    "<DecimalLiteral>",
    "<DoubleLiteral>",
    "<StringLiteral>",
    "<DUMMYLABEL>",
    "<skip_>",
    "\"-\"",
    "\"+\"",
    "\"external\"",
    "\"ascending\"",
    "\"descending\"",
    "\"greatest\"",
    "\"least\"",
    "<LocalPart>",
    "<Nmstart>",
    "<Nmchar>",
    "<PredefinedEntityRef>",
    "\"\\\"\\\"\"",
    "\"\\\'\\\'\"",
    "<HexDigits>",
    "\"{\"",
    "\"}\"",
    "\"}\"",
    "\"{{\"",
    "\"}}\"",
    "\"&\"",
    "\"<\"",
    "\"<\"",
    "\"<\"",
    "\">\"",
    "\"\\\"\"",
    "\"\\\"\"",
    "\"\\\'\"",
    "\"\\\'\"",
    "<ExtensionContentChar>",
    "<ElementContentChar>",
    "<QuotAttrContentChar>",
    "<AposAttrContentChar>",
    "<CommentContentChar>",
    "\"/>\"",
    "\"</\"",
    "\">\"",
    "\"=\"",
    "\"(#\"",
    "\"#)\"",
    "<XMLCommentDoubleDashError>",
    "<CommentContentCharDash>",
    "\"<?\"",
    "\"<?\"",
    "\"?>\"",
    "<PIContentChar>",
    "<CDataSectionChar>",
    "\"<![CDATA[\"",
    "\"<![CDATA[\"",
    "<CdataSectionEnd>",
    "\"<!--\"",
    "\"<!--\"",
    "\"-->\"",
    "<Comment>",
    "\"(:\"",
    "<CommentContent>",
    "\":)\"",
    "\"/\"",
    "\"//\"",
    "<PITargetError>",
    "<PITarget>",
    "<CharRef>",
    "<QNameToken>",
    "<QNameForPragma>",
    "<TagQName>",
    "<EndTagQName>",
    "<NCNameTok>",
    "<NCNameColonStar>",
    "<StarColonNCName>",
    "<S>",
    "<SForPragma>",
    "<SForPI>",
    "<Char>",
    "<Digits>",
    "<CommentContents>",
    "<WhitespaceChar>",
    "<Letter>",
    "<BaseChar>",
    "<Ideographic>",
    "<CombiningChar>",
    "<Digit>",
    "<Extender>",
    "<NotNumber>",
  };

}
